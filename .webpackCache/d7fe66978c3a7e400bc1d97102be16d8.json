{"remainingRequest":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\ts-loader\\index.js!C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\photo\\photoService.ts","dependencies":[{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\photo\\photoService.ts","mtime":1704632793092},{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\photo\\photoService.ts","sourceRoot":"","sources":["C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\photo\\photoService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAqC;AACrC,+BAA6C;AAC7C,kDAA4C;AAE5C,IAAM,WAAW,GAAG,UAAO,UAAkB;;;;;;gBAC3C,uCAAuC;gBACvC,IAAI,CAAC,UAAU,EAAE;oBACf,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;iBAC1D;gBAEK,aAAa,GAAG,oCAAoC,CAAC;gBACrD,cAAc,GAAG,6CAA6C,CAAC;gBAC/D,YAAY,GAAG,0DAA0D,CAAC;;;;gBAQ5D,qBAAM,eAAK,CAAC,GAAG,CAAC,uCAAgC,aAAa,gBAAM,UAAU,CAAE,CAAC,EAAA;;gBADlG,wCAAwC;gBACxC,eAAe,GAAG,SAAgF,CAAC;gBAChF,qBAAM,eAAK,CAAC,GAAG,CAAC,oDAA6C,cAAc,oBAAU,UAAU,CAAE,CAAC,EAAA;;gBAArH,gBAAgB,GAAG,SAAkG,CAAC;gBACrG,qBAAM,eAAK,CAAC,GAAG,CAAC,iDAA0C,UAAU,CAAE,EAAE;wBACvF,OAAO,EAAE,EAAE,aAAa,EAAE,YAAY,EAAE;qBACzC,CAAC,EAAA;;gBAFF,cAAc,GAAG,SAEf,CAAC;;;;gBAGG,aAAa,GAAG;oBACpB,OAAO,EAAE,CAAC,CAAA,MAAA,OAAK,CAAC,QAAQ,0CAAE,IAAI,KAAI,EAAE,CAAC,CAAC,OAAO,IAAI,iCAAiC;oBAClF,QAAQ,EAAE,OAAK,CAAC,OAAO,IAAI,kCAAkC;oBAC7D,MAAM,EAAE,CAAC,CAAA,MAAA,OAAK,CAAC,QAAQ,0CAAE,IAAI,KAAI,EAAE,CAAC,CAAC,OAAO,IAAI,gCAAgC;iBACjF,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,gCAAyB,aAAa,CAAC,OAAO,gBAAM,aAAa,CAAC,QAAQ,gBAAM,aAAa,CAAC,MAAM,CAAE,CAAC,CAAC;;gBAIpH,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,CAAC;oBACjE,MAAM,EAAE,SAAS;oBACjB,WAAW,EAAE,GAAG,CAAC,IAAI;oBACrB,GAAG,EAAE,GAAG,CAAC,YAAY;iBACtB,CAAC,EAJgE,CAIhE,CAAC,CAAC;gBAEE,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,KAAU,IAAK,OAAA,CAAC;oBAChE,MAAM,EAAE,UAAU;oBAClB,WAAW,EAAE,KAAK,CAAC,eAAe;oBAClC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO;iBACxB,CAAC,EAJ+D,CAI/D,CAAC,CAAC;gBAEE,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAU,IAAK,OAAA,CAAC;oBACnE,MAAM,EAAE,QAAQ;oBAChB,WAAW,EAAE,KAAK,CAAC,GAAG;oBACtB,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,QAAQ;iBACxB,CAAC,EAJkE,CAIlE,CAAC,CAAC;gBAEE,SAAS,wDAAO,aAAa,kBAAK,cAAc,kBAAK,YAAY,SAAC,CAAC;gBAEzE,iDAAiD;gBACjD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;iBAC7C;gBAED,oCAAoC;gBACpC,qBAAM,kBAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAA;;gBADjC,oCAAoC;gBACpC,SAAiC,CAAC;gBAElC,sBAAO,SAAS,EAAC;;;KAClB,CAAC;AAEO,kCAAW","sourcesContent":["// src/handlers/photo/photoService.ts\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { Photo } from '@/models/photoModel';\r\n\r\nconst fetchPhotos = async (searchTerm: string) => {\r\n  // Verifica se o searchTerm é fornecido\r\n  if (!searchTerm) {\r\n    throw new Error('O parâmetro searchTerm é obrigatório.');\r\n  }\r\n\r\n  const pixabayApiKey = '41685291-cdd48a139165d5ccd529db0aa';\r\n  const unsplashApiKey = 'KTsEkLxeJany13vonWNtfflZICExHJ23ul2NRyEUum8';\r\n  const pexelsApiKey = 'M4bAhUA8Vf3UVOg0by60snz7NpxmlE2vuTG5bomIrOAr2IJqx2RyLy57';\r\n\r\n  let pixabayResponse: AxiosResponse;\r\n  let unsplashResponse: AxiosResponse;\r\n  let pexelsResponse: AxiosResponse;\r\n\r\n  try {\r\n    // Use Axios para fazer chamadas às APIs\r\n    pixabayResponse = await axios.get(`https://pixabay.com/api/?key=${pixabayApiKey}&q=${searchTerm}`);\r\n    unsplashResponse = await axios.get(`https://api.unsplash.com/photos?client_id=${unsplashApiKey}&query=${searchTerm}`);\r\n    pexelsResponse = await axios.get(`https://api.pexels.com/v1/search?query=${searchTerm}`, {\r\n      headers: { Authorization: pexelsApiKey },\r\n    });\r\n  } catch (error) {\r\n    // Lidar com erros durante as chamadas da API\r\n    const errorMessages = {\r\n      pixabay: (error.response?.data || {}).message || 'Erro na chamada da API Pixabay.',\r\n      unsplash: error.message || 'Erro na chamada da API Unsplash.',\r\n      pexels: (error.response?.data || {}).message || 'Erro na chamada da API Pexels.',\r\n    };\r\n    throw new Error(`Erro ao buscar fotos: ${errorMessages.pixabay} | ${errorMessages.unsplash} | ${errorMessages.pexels}`);\r\n  }\r\n\r\n  // Extrair dados relevantes da resposta e armazenar no banco de dados\r\n  const pixabayPhotos = pixabayResponse.data.hits.map((hit: any) => ({\r\n    source: 'Pixabay',\r\n    description: hit.tags,\r\n    url: hit.webformatURL,\r\n  }));\r\n\r\n  const unsplashPhotos = unsplashResponse.data.map((photo: any) => ({\r\n    source: 'Unsplash',\r\n    description: photo.alt_description,\r\n    url: photo.urls.regular,\r\n  }));\r\n\r\n  const pexelsPhotos = pexelsResponse.data.photos.map((photo: any) => ({\r\n    source: 'Pexels',\r\n    description: photo.url,\r\n    url: photo.src.original,\r\n  }));\r\n\r\n  const allPhotos = [...pixabayPhotos, ...unsplashPhotos, ...pexelsPhotos];\r\n\r\n  // Verificar se pelo menos uma API retornou fotos\r\n  if (allPhotos.length === 0) {\r\n    throw new Error('Nenhuma foto encontrada.');\r\n  }\r\n\r\n  // Salvar as fotos no banco de dados\r\n  await Photo.insertMany(allPhotos);\r\n\r\n  return allPhotos;\r\n};\r\n\r\nexport { fetchPhotos };\r\n"]}]}