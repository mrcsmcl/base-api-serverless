{"remainingRequest":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\ts-loader\\index.js!C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\healthCheck\\healthCheckService.ts","dependencies":[{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\healthCheck\\healthCheckService.ts","mtime":1704481060449},{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOw0KdmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7DQogICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9DQogICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7DQogICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH0NCiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbInRocm93Il0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQ0KICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfQ0KICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7DQogICAgfSk7DQp9Ow0KdmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHsNCiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnOw0KICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCAidGhyb3ciOiB2ZXJiKDEpLCAicmV0dXJuIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnOw0KICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfQ0KICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHsNCiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy4iKTsNCiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHsNCiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbInJldHVybiJdIDogb3BbMF0gPyB5WyJ0aHJvdyJdIHx8ICgodCA9IHlbInJldHVybiJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDsNCiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTsNCiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHsNCiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9Ow0KICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTsNCiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9DQogICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9DQogICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9DQogICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTsNCiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pOw0KICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9DQogICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9Ow0KICAgIH0NCn07DQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KZXhwb3J0cy5nZXRIZWFsdGhTZXJ2aWNlID0gdm9pZCAwOw0KdmFyIHBhY2thZ2VfMSA9IHJlcXVpcmUoIkAvcGFja2FnZSIpOw0KdmFyIG1vbmdvb3NlXzEgPSByZXF1aXJlKCJtb25nb29zZSIpOw0KdmFyIGdldEFwcGxpY2F0aW9uSGVhbHRoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHsNCiAgICB2YXIgdG9kYXksIHN0YXJ0LCBzdGF0dXMsIGR1cmF0aW9uLCBoZWFsdGhDaGVja2VkOw0KICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHsNCiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkgew0KICAgICAgICAgICAgY2FzZSAwOg0KICAgICAgICAgICAgICAgIHRvZGF5ID0gbmV3IERhdGUoKTsNCiAgICAgICAgICAgICAgICBzdGFydCA9IERhdGUubm93KCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0TW9uZ29IZWFsdGgoKV07DQogICAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICAgICAgc3RhdHVzID0gX2Euc2VudCgpOw0KICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0Ow0KICAgICAgICAgICAgICAgIGhlYWx0aENoZWNrZWQgPSB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6IHBhY2thZ2VfMS5uYW1lLA0KICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBwYWNrYWdlXzEudmVyc2lvbiwNCiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBkYXRlOiAiIi5jb25jYXQodG9kYXkuZ2V0RGF0ZSgpLCAiLyIpLmNvbmNhdCh0b2RheS5nZXRNb250aCgpLCAiLyIpLmNvbmNhdCh0b2RheS5nZXRGdWxsWWVhcigpLCAiICIpLmNvbmNhdCh0b2RheS5nZXRIb3VycygpLCAiOiIpLmNvbmNhdCh0b2RheS5nZXRNaW51dGVzKCksICI6IikuY29uY2F0KHRvZGF5LmdldFNlY29uZHMoKSksDQogICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiwNCiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkYXRhYmFzZSBpbnRlZ3JhdGlvbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdkYicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfdGltZTogIiIuY29uY2F0KGR1cmF0aW9uLCAiIG1scyIpDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBoZWFsdGhDaGVja2VkXTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfSk7IH07DQp2YXIgZ2V0TW9uZ29IZWFsdGggPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkgew0KICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHsNCiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG1vbmdvb3NlXzEuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAxID8gJ1VQJyA6ICdET1dOJ107DQogICAgfSk7DQp9KTsgfTsNCnZhciBnZXRIZWFsdGhTZXJ2aWNlID0gew0KICAgIGdldEFwcGxpY2F0aW9uSGVhbHRoOiBnZXRBcHBsaWNhdGlvbkhlYWx0aA0KfTsNCmV4cG9ydHMuZ2V0SGVhbHRoU2VydmljZSA9IGdldEhlYWx0aFNlcnZpY2U7DQo="},{"version":3,"file":"C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\healthCheck\\healthCheckService.ts","sourceRoot":"","sources":["C:\\Users\\mrcsm\\Desktop\\base-api-serverless\\src\\handlers\\healthCheck\\healthCheckService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAyC;AACzC,qCAAqC;AAErC,IAAM,oBAAoB,GAAG;;;;;gBACrB,KAAK,GAAG,IAAI,IAAI,EAAE,CAAA;gBAClB,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;gBACT,qBAAM,cAAc,EAAE,EAAA;;gBAA/B,MAAM,GAAG,SAAsB;gBAC/B,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAA;gBAE7B,aAAa,GAAG;oBACpB,IAAI,EAAE,cAAI;oBACV,OAAO,EAAE,iBAAO;oBAChB,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,UAAG,KAAK,CAAC,OAAO,EAAE,cAAI,KAAK,CAAC,QAAQ,EAAE,cAAI,KAAK,CAAC,WAAW,EAAE,cAAI,KAAK,CAAC,QAAQ,EAAE,cAAI,KAAK,CAAC,UAAU,EAAE,cAAI,KAAK,CAAC,UAAU,EAAE,CAAE;oBACrI,QAAQ,UAAA;oBACR,YAAY,EAAE;wBACZ,QAAQ,EAAE;4BACR,IAAI,EAAE,sBAAsB;4BAC5B,EAAE,EAAE,IAAI;4BACR,MAAM,QAAA;4BACN,aAAa,EAAE,UAAG,QAAQ,SAAM;yBACjC;qBACF;iBACF,CAAA;gBAED,sBAAO,aAAa,EAAA;;;KACrB,CAAA;AAED,IAAM,cAAc,GAAG;;QACrB,sBAAO,qBAAU,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAA;;KACnD,CAAA;AAED,IAAM,gBAAgB,GAAG;IACvB,oBAAoB,sBAAA;CACrB,CAAA;AAGC,4CAAgB","sourcesContent":["import { version, name } from '@/package'\r\nimport { connection } from 'mongoose'\r\n\r\nconst getApplicationHealth = async () => {\r\n  const today = new Date()\r\n  const start = Date.now()\r\n  const status = await getMongoHealth()\r\n  const duration = Date.now() - start\r\n\r\n  const healthChecked = {\r\n    name: name,\r\n    version: version,\r\n    status: true,\r\n    date: `${today.getDate()}/${today.getMonth()}/${today.getFullYear()} ${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`, // Data e horÃ¡rio atual\r\n    duration,\r\n    integrations: {\r\n      database: {\r\n        name: 'database integration',\r\n        id: 'db',\r\n        status,\r\n        response_time: `${duration} mls`\r\n      }\r\n    }\r\n  }\r\n\r\n  return healthChecked\r\n}\r\n\r\nconst getMongoHealth = async () => {\r\n  return connection.readyState === 1 ? 'UP' : 'DOWN'\r\n}\r\n\r\nconst getHealthService = {\r\n  getApplicationHealth\r\n}\r\n\r\nexport {\r\n  getHealthService\r\n}\r\n"]}]}